# Makefile.in generated by automake 1.10 from Makefile.am.
# @configure_input@

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005, 2006  Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.

@SET_MAKE@

VPATH = @srcdir@
pkgdatadir = $(datadir)/@PACKAGE@
pkglibdir = $(libdir)/@PACKAGE@
pkgincludedir = $(includedir)/@PACKAGE@
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = @build@
host_triplet = @host@
noinst_PROGRAMS = hello$(EXEEXT) fib$(EXEEXT) fib-serial$(EXEEXT) \
	testall$(EXEEXT) ck$(EXEEXT) magic$(EXEEXT) knapsack$(EXEEXT) \
	queens$(EXEEXT) cilksort$(EXEEXT) fft$(EXEEXT) \
	test-locks$(EXEEXT) bucket$(EXEEXT) cholesky$(EXEEXT) \
	game$(EXEEXT) nfib$(EXEEXT) kalah$(EXEEXT) matmul$(EXEEXT) \
	lu$(EXEEXT) plu$(EXEEXT) heat$(EXEEXT) test-errno$(EXEEXT) \
	strassen$(EXEEXT) rectmul$(EXEEXT) spacemul$(EXEEXT) \
	test-void-func$(EXEEXT) velin$(EXEEXT) cholesky-lib$(EXEEXT) \
	nfib-lib$(EXEEXT)
subdir = examples
DIST_COMMON = $(srcdir)/Makefile.am $(srcdir)/Makefile.in
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/acinclude.m4 \
	$(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(install_sh) -d
CONFIG_HEADER = $(top_builddir)/config.h \
	$(top_builddir)/runtime/cilk-sysdep.h
CONFIG_CLEAN_FILES =
PROGRAMS = $(noinst_PROGRAMS)
am__objects_1 = getoptions.$(OBJEXT)
am_bucket_OBJECTS = bucket.$(OBJEXT) $(am__objects_1)
bucket_OBJECTS = $(am_bucket_OBJECTS)
bucket_LDADD = $(LDADD)
am_cholesky_OBJECTS = cholesky.$(OBJEXT) rand.$(OBJEXT) \
	$(am__objects_1)
cholesky_OBJECTS = $(am_cholesky_OBJECTS)
cholesky_LDADD = $(LDADD)
am_cholesky_lib_OBJECTS = cholesky-lib.$(OBJEXT) rand.$(OBJEXT) \
	$(am__objects_1)
cholesky_lib_OBJECTS = $(am_cholesky_lib_OBJECTS)
cholesky_lib_LDADD = $(LDADD)
am_cilksort_OBJECTS = cilksort.$(OBJEXT) $(am__objects_1)
cilksort_OBJECTS = $(am_cilksort_OBJECTS)
cilksort_LDADD = $(LDADD)
am_ck_OBJECTS = ck.$(OBJEXT) rand.$(OBJEXT) $(am__objects_1)
ck_OBJECTS = $(am_ck_OBJECTS)
ck_LDADD = $(LDADD)
am_fft_OBJECTS = fft.$(OBJEXT) $(am__objects_1)
fft_OBJECTS = $(am_fft_OBJECTS)
fft_LDADD = $(LDADD)
am_fib_OBJECTS = fib.$(OBJEXT)
fib_OBJECTS = $(am_fib_OBJECTS)
fib_LDADD = $(LDADD)
am_fib_serial_OBJECTS = fib-serial.$(OBJEXT)
fib_serial_OBJECTS = $(am_fib_serial_OBJECTS)
fib_serial_LDADD = $(LDADD)
am_game_OBJECTS = game.$(OBJEXT) $(am__objects_1)
game_OBJECTS = $(am_game_OBJECTS)
game_LDADD = $(LDADD)
am_heat_OBJECTS = heat.$(OBJEXT) $(am__objects_1)
heat_OBJECTS = $(am_heat_OBJECTS)
heat_LDADD = $(LDADD)
am_hello_OBJECTS = hello.$(OBJEXT)
hello_OBJECTS = $(am_hello_OBJECTS)
hello_LDADD = $(LDADD)
am_kalah_OBJECTS = kalah.$(OBJEXT)
kalah_OBJECTS = $(am_kalah_OBJECTS)
kalah_LDADD = $(LDADD)
am_knapsack_OBJECTS = knapsack.$(OBJEXT) $(am__objects_1)
knapsack_OBJECTS = $(am_knapsack_OBJECTS)
knapsack_LDADD = $(LDADD)
am_lu_OBJECTS = lu.$(OBJEXT) $(am__objects_1)
lu_OBJECTS = $(am_lu_OBJECTS)
lu_LDADD = $(LDADD)
am_magic_OBJECTS = magic.$(OBJEXT) $(am__objects_1)
magic_OBJECTS = $(am_magic_OBJECTS)
magic_LDADD = $(LDADD)
am_matmul_OBJECTS = matmul.$(OBJEXT) rand.$(OBJEXT) $(am__objects_1)
matmul_OBJECTS = $(am_matmul_OBJECTS)
matmul_LDADD = $(LDADD)
am_nfib_OBJECTS = nfib.$(OBJEXT)
nfib_OBJECTS = $(am_nfib_OBJECTS)
nfib_LDADD = $(LDADD)
am_nfib_lib_OBJECTS = nfib-lib.$(OBJEXT)
nfib_lib_OBJECTS = $(am_nfib_lib_OBJECTS)
nfib_lib_LDADD = $(LDADD)
am_plu_OBJECTS = plu.$(OBJEXT) $(am__objects_1)
plu_OBJECTS = $(am_plu_OBJECTS)
plu_LDADD = $(LDADD)
am_queens_OBJECTS = queens.$(OBJEXT)
queens_OBJECTS = $(am_queens_OBJECTS)
queens_LDADD = $(LDADD)
am_rectmul_OBJECTS = rectmul.$(OBJEXT) $(am__objects_1)
rectmul_OBJECTS = $(am_rectmul_OBJECTS)
rectmul_LDADD = $(LDADD)
am_spacemul_OBJECTS = spacemul.$(OBJEXT) $(am__objects_1)
spacemul_OBJECTS = $(am_spacemul_OBJECTS)
spacemul_LDADD = $(LDADD)
am_strassen_OBJECTS = strassen.$(OBJEXT) $(am__objects_1)
strassen_OBJECTS = $(am_strassen_OBJECTS)
strassen_LDADD = $(LDADD)
am_test_errno_OBJECTS = test-errno.$(OBJEXT)
test_errno_OBJECTS = $(am_test_errno_OBJECTS)
test_errno_LDADD = $(LDADD)
am_test_locks_OBJECTS = test-locks.$(OBJEXT)
test_locks_OBJECTS = $(am_test_locks_OBJECTS)
test_locks_LDADD = $(LDADD)
am_test_void_func_OBJECTS = test-void-func.$(OBJEXT)
test_void_func_OBJECTS = $(am_test_void_func_OBJECTS)
test_void_func_LDADD = $(LDADD)
am_testall_OBJECTS = testall.$(OBJEXT) rand.$(OBJEXT)
testall_OBJECTS = $(am_testall_OBJECTS)
testall_LDADD = $(LDADD)
am_velin_OBJECTS = velin.$(OBJEXT)
velin_OBJECTS = $(am_velin_OBJECTS)
velin_LDADD = $(LDADD)
DEFAULT_INCLUDES = -I. -I$(top_builddir) -I$(top_builddir)/runtime@am__isrc@
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
LTCOMPILE = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
SOURCES = $(bucket_SOURCES) $(cholesky_SOURCES) \
	$(cholesky_lib_SOURCES) $(cilksort_SOURCES) $(ck_SOURCES) \
	$(fft_SOURCES) $(fib_SOURCES) $(fib_serial_SOURCES) \
	$(game_SOURCES) $(heat_SOURCES) $(hello_SOURCES) \
	$(kalah_SOURCES) $(knapsack_SOURCES) $(lu_SOURCES) \
	$(magic_SOURCES) $(matmul_SOURCES) $(nfib_SOURCES) \
	$(nfib_lib_SOURCES) $(plu_SOURCES) $(queens_SOURCES) \
	$(rectmul_SOURCES) $(spacemul_SOURCES) $(strassen_SOURCES) \
	$(test_errno_SOURCES) $(test_locks_SOURCES) \
	$(test_void_func_SOURCES) $(testall_SOURCES) $(velin_SOURCES)
DIST_SOURCES = $(bucket_SOURCES) $(cholesky_SOURCES) \
	$(cholesky_lib_SOURCES) $(cilksort_SOURCES) $(ck_SOURCES) \
	$(fft_SOURCES) $(fib_SOURCES) $(fib_serial_SOURCES) \
	$(game_SOURCES) $(heat_SOURCES) $(hello_SOURCES) \
	$(kalah_SOURCES) $(knapsack_SOURCES) $(lu_SOURCES) \
	$(magic_SOURCES) $(matmul_SOURCES) $(nfib_SOURCES) \
	$(nfib_lib_SOURCES) $(plu_SOURCES) $(queens_SOURCES) \
	$(rectmul_SOURCES) $(spacemul_SOURCES) $(strassen_SOURCES) \
	$(test_errno_SOURCES) $(test_locks_SOURCES) \
	$(test_void_func_SOURCES) $(testall_SOURCES) $(velin_SOURCES)
ETAGS = etags
CTAGS = ctags
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = @ACLOCAL@
AMTAR = @AMTAR@
AR = @AR@
AUTOCONF = @AUTOCONF@
AUTOHEADER = @AUTOHEADER@
AUTOMAKE = @AUTOMAKE@
AWK = @AWK@
CC = @CC@
CCDEPMODE = @CCDEPMODE@
CFLAGS = @CFLAGS@
CPP = @CPP@
CPPFLAGS = @CPPFLAGS@
CXX = @CXX@
CXXCPP = @CXXCPP@
CXXDEPMODE = @CXXDEPMODE@
CXXFLAGS = @CXXFLAGS@
CYGPATH_W = @CYGPATH_W@
DEFS = @DEFS@
DEPDIR = @DEPDIR@
ECHO = @ECHO@
ECHO_C = @ECHO_C@
ECHO_N = @ECHO_N@
ECHO_T = @ECHO_T@
EGREP = @EGREP@
EXEEXT = @EXEEXT@
F77 = @F77@
FFLAGS = @FFLAGS@
GREP = @GREP@
INSTALL = @INSTALL@
INSTALL_DATA = @INSTALL_DATA@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_SCRIPT = @INSTALL_SCRIPT@
INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@
LDFLAGS = @LDFLAGS@
LEX = @LEX@
LEXLIB = @LEXLIB@
LEX_OUTPUT_ROOT = @LEX_OUTPUT_ROOT@
LIBOBJS = @LIBOBJS@
LIBS = @LIBS@
LIBTOOL = @LIBTOOL@
LN_S = @LN_S@
LTLIBOBJS = @LTLIBOBJS@
MAKEINFO = @MAKEINFO@
MKDIR_P = @MKDIR_P@
OBJEXT = @OBJEXT@
PACKAGE = @PACKAGE@
PACKAGE_BUGREPORT = @PACKAGE_BUGREPORT@
PACKAGE_NAME = @PACKAGE_NAME@
PACKAGE_STRING = @PACKAGE_STRING@
PACKAGE_TARNAME = @PACKAGE_TARNAME@
PACKAGE_VERSION = @PACKAGE_VERSION@
PATH_SEPARATOR = @PATH_SEPARATOR@
PERFCTR_LIBS = @PERFCTR_LIBS@
PTHREAD_CC = @PTHREAD_CC@
PTHREAD_CFLAGS = @PTHREAD_CFLAGS@
PTHREAD_LIBS = @PTHREAD_LIBS@
RANLIB = @RANLIB@
SET_MAKE = @SET_MAKE@
SHELL = @SHELL@
STRIP = @STRIP@
VERSION = @VERSION@
YACC = @YACC@
YFLAGS = @YFLAGS@
abs_builddir = @abs_builddir@
abs_srcdir = @abs_srcdir@
abs_top_builddir = @abs_top_builddir@
abs_top_srcdir = @abs_top_srcdir@
ac_ct_CC = @ac_ct_CC@
ac_ct_CXX = @ac_ct_CXX@
ac_ct_F77 = @ac_ct_F77@
acx_pthread_config = @acx_pthread_config@
am__include = @am__include@
am__leading_dot = @am__leading_dot@
am__quote = @am__quote@
am__tar = @am__tar@
am__untar = @am__untar@
bindir = @bindir@
build = @build@
build_alias = @build_alias@
build_cpu = @build_cpu@
build_os = @build_os@
build_vendor = @build_vendor@
builddir = @builddir@
datadir = @datadir@
datarootdir = @datarootdir@
docdir = @docdir@
dvidir = @dvidir@
exec_prefix = @exec_prefix@
host = @host@
host_alias = @host_alias@
host_cpu = @host_cpu@
host_os = @host_os@
host_vendor = @host_vendor@
htmldir = @htmldir@
includedir = @includedir@
infodir = @infodir@
install_sh = @install_sh@
libdir = @libdir@
libexecdir = @libexecdir@
localedir = @localedir@
localstatedir = @localstatedir@
mandir = @mandir@
mkdir_p = @mkdir_p@
oldincludedir = @oldincludedir@
pdfdir = @pdfdir@
prefix = @prefix@
program_transform_name = @program_transform_name@
psdir = @psdir@
sbindir = @sbindir@
sharedstatedir = @sharedstatedir@
srcdir = @srcdir@
sysconfdir = @sysconfdir@
target_alias = @target_alias@
top_builddir = @top_builddir@
top_srcdir = @top_srcdir@

# Simulate CILK before installation
CILK = $(top_builddir)/support/cilkclocal
SUFFIXES = .cilk
NPROC = 4
PROGFLAGS = --nproc $(NPROC) --yield
CILKFLAGS = @CFLAGS@
CILKCOMPILE = $(CILK) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CILKFLAGS) $(CILKFLAGS)
CILKLD = $(CILK)
CILKLINK = $(CILKLD) $(AM_CILKFLAGS) $(CILKFLAGS) $(PERFCTR_LIBS) $(LDFLAGS) -o $@
LINK = $(CILKLINK)
MOSTLYCLEANFILES = pragma.E pragma.E.cilk pragma.E.c deprecated.log deprecated2.out deprecated2.log deprecated2.i
GETOPTIONS_SRC = getoptions.c getoptions.h
fib_serial_SOURCES = fib-serial.c
hello_SOURCES = hello.cilk
fib_SOURCES = fib.cilk
velin_SOURCES = velin.cilk
testall_SOURCES = testall.cilk rand.cilk
test_locks_SOURCES = test-locks.cilk
test_errno_SOURCES = test-errno.cilk
ck_SOURCES = ck.cilk rand.cilk $(GETOPTIONS_SRC)
magic_SOURCES = magic.cilk $(GETOPTIONS_SRC)
knapsack_SOURCES = knapsack.cilk $(GETOPTIONS_SRC)
queens_SOURCES = queens.cilk
cilksort_SOURCES = cilksort.cilk $(GETOPTIONS_SRC)
fft_SOURCES = fft.cilk $(GETOPTIONS_SRC)
bucket_SOURCES = bucket.cilk $(GETOPTIONS_SRC)
cholesky_SOURCES = cholesky.cilk rand.cilk $(GETOPTIONS_SRC)
cholesky_lib_SOURCES = cholesky-lib.cilk rand.cilk $(GETOPTIONS_SRC)
matmul_SOURCES = matmul.cilk rand.cilk $(GETOPTIONS_SRC)
game_SOURCES = game.cilk $(GETOPTIONS_SRC)
nfib_SOURCES = nfib.cilk
nfib_lib_SOURCES = nfib-lib.cilk
kalah_SOURCES = kalah.cilk
lu_SOURCES = lu.cilk  $(GETOPTIONS_SRC)
plu_SOURCES = plu.cilk  $(GETOPTIONS_SRC)
heat_SOURCES = heat.cilk  $(GETOPTIONS_SRC)
strassen_SOURCES = strassen.cilk  $(GETOPTIONS_SRC)
rectmul_SOURCES = rectmul.cilk  $(GETOPTIONS_SRC)
spacemul_SOURCES = spacemul.cilk  $(GETOPTIONS_SRC)
test_void_func_SOURCES = test-void-func.cilk
EXTRA_DIST = knapsack-example1.input knapsack-example2.input	\
knapsack-example3.input

all: all-am

.SUFFIXES:
.SUFFIXES: .cilk .c .lo .o .obj
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh \
		&& exit 0; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --gnu  examples/Makefile'; \
	cd $(top_srcdir) && \
	  $(AUTOMAKE) --gnu  examples/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

clean-noinstPROGRAMS:
	@list='$(noinst_PROGRAMS)'; for p in $$list; do \
	  f=`echo $$p|sed 's/$(EXEEXT)$$//'`; \
	  echo " rm -f $$p $$f"; \
	  rm -f $$p $$f ; \
	done
bucket$(EXEEXT): $(bucket_OBJECTS) $(bucket_DEPENDENCIES) 
	@rm -f bucket$(EXEEXT)
	$(LINK) $(bucket_OBJECTS) $(bucket_LDADD) $(LIBS)
cholesky$(EXEEXT): $(cholesky_OBJECTS) $(cholesky_DEPENDENCIES) 
	@rm -f cholesky$(EXEEXT)
	$(LINK) $(cholesky_OBJECTS) $(cholesky_LDADD) $(LIBS)
cholesky-lib$(EXEEXT): $(cholesky_lib_OBJECTS) $(cholesky_lib_DEPENDENCIES) 
	@rm -f cholesky-lib$(EXEEXT)
	$(LINK) $(cholesky_lib_OBJECTS) $(cholesky_lib_LDADD) $(LIBS)
cilksort$(EXEEXT): $(cilksort_OBJECTS) $(cilksort_DEPENDENCIES) 
	@rm -f cilksort$(EXEEXT)
	$(LINK) $(cilksort_OBJECTS) $(cilksort_LDADD) $(LIBS)
ck$(EXEEXT): $(ck_OBJECTS) $(ck_DEPENDENCIES) 
	@rm -f ck$(EXEEXT)
	$(LINK) $(ck_OBJECTS) $(ck_LDADD) $(LIBS)
fft$(EXEEXT): $(fft_OBJECTS) $(fft_DEPENDENCIES) 
	@rm -f fft$(EXEEXT)
	$(LINK) $(fft_OBJECTS) $(fft_LDADD) $(LIBS)
fib$(EXEEXT): $(fib_OBJECTS) $(fib_DEPENDENCIES) 
	@rm -f fib$(EXEEXT)
	$(LINK) $(fib_OBJECTS) $(fib_LDADD) $(LIBS)
game$(EXEEXT): $(game_OBJECTS) $(game_DEPENDENCIES) 
	@rm -f game$(EXEEXT)
	$(LINK) $(game_OBJECTS) $(game_LDADD) $(LIBS)
heat$(EXEEXT): $(heat_OBJECTS) $(heat_DEPENDENCIES) 
	@rm -f heat$(EXEEXT)
	$(LINK) $(heat_OBJECTS) $(heat_LDADD) $(LIBS)
hello$(EXEEXT): $(hello_OBJECTS) $(hello_DEPENDENCIES) 
	@rm -f hello$(EXEEXT)
	$(LINK) $(hello_OBJECTS) $(hello_LDADD) $(LIBS)
kalah$(EXEEXT): $(kalah_OBJECTS) $(kalah_DEPENDENCIES) 
	@rm -f kalah$(EXEEXT)
	$(LINK) $(kalah_OBJECTS) $(kalah_LDADD) $(LIBS)
knapsack$(EXEEXT): $(knapsack_OBJECTS) $(knapsack_DEPENDENCIES) 
	@rm -f knapsack$(EXEEXT)
	$(LINK) $(knapsack_OBJECTS) $(knapsack_LDADD) $(LIBS)
lu$(EXEEXT): $(lu_OBJECTS) $(lu_DEPENDENCIES) 
	@rm -f lu$(EXEEXT)
	$(LINK) $(lu_OBJECTS) $(lu_LDADD) $(LIBS)
magic$(EXEEXT): $(magic_OBJECTS) $(magic_DEPENDENCIES) 
	@rm -f magic$(EXEEXT)
	$(LINK) $(magic_OBJECTS) $(magic_LDADD) $(LIBS)
matmul$(EXEEXT): $(matmul_OBJECTS) $(matmul_DEPENDENCIES) 
	@rm -f matmul$(EXEEXT)
	$(LINK) $(matmul_OBJECTS) $(matmul_LDADD) $(LIBS)
nfib$(EXEEXT): $(nfib_OBJECTS) $(nfib_DEPENDENCIES) 
	@rm -f nfib$(EXEEXT)
	$(LINK) $(nfib_OBJECTS) $(nfib_LDADD) $(LIBS)
nfib-lib$(EXEEXT): $(nfib_lib_OBJECTS) $(nfib_lib_DEPENDENCIES) 
	@rm -f nfib-lib$(EXEEXT)
	$(LINK) $(nfib_lib_OBJECTS) $(nfib_lib_LDADD) $(LIBS)
plu$(EXEEXT): $(plu_OBJECTS) $(plu_DEPENDENCIES) 
	@rm -f plu$(EXEEXT)
	$(LINK) $(plu_OBJECTS) $(plu_LDADD) $(LIBS)
queens$(EXEEXT): $(queens_OBJECTS) $(queens_DEPENDENCIES) 
	@rm -f queens$(EXEEXT)
	$(LINK) $(queens_OBJECTS) $(queens_LDADD) $(LIBS)
rectmul$(EXEEXT): $(rectmul_OBJECTS) $(rectmul_DEPENDENCIES) 
	@rm -f rectmul$(EXEEXT)
	$(LINK) $(rectmul_OBJECTS) $(rectmul_LDADD) $(LIBS)
spacemul$(EXEEXT): $(spacemul_OBJECTS) $(spacemul_DEPENDENCIES) 
	@rm -f spacemul$(EXEEXT)
	$(LINK) $(spacemul_OBJECTS) $(spacemul_LDADD) $(LIBS)
strassen$(EXEEXT): $(strassen_OBJECTS) $(strassen_DEPENDENCIES) 
	@rm -f strassen$(EXEEXT)
	$(LINK) $(strassen_OBJECTS) $(strassen_LDADD) $(LIBS)
test-errno$(EXEEXT): $(test_errno_OBJECTS) $(test_errno_DEPENDENCIES) 
	@rm -f test-errno$(EXEEXT)
	$(LINK) $(test_errno_OBJECTS) $(test_errno_LDADD) $(LIBS)
test-locks$(EXEEXT): $(test_locks_OBJECTS) $(test_locks_DEPENDENCIES) 
	@rm -f test-locks$(EXEEXT)
	$(LINK) $(test_locks_OBJECTS) $(test_locks_LDADD) $(LIBS)
test-void-func$(EXEEXT): $(test_void_func_OBJECTS) $(test_void_func_DEPENDENCIES) 
	@rm -f test-void-func$(EXEEXT)
	$(LINK) $(test_void_func_OBJECTS) $(test_void_func_LDADD) $(LIBS)
testall$(EXEEXT): $(testall_OBJECTS) $(testall_DEPENDENCIES) 
	@rm -f testall$(EXEEXT)
	$(LINK) $(testall_OBJECTS) $(testall_LDADD) $(LIBS)
velin$(EXEEXT): $(velin_OBJECTS) $(velin_DEPENDENCIES) 
	@rm -f velin$(EXEEXT)
	$(LINK) $(velin_OBJECTS) $(velin_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/fib-serial.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/getoptions.Po@am__quote@

.c.o:
@am__fastdepCC_TRUE@	$(COMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
@am__fastdepCC_TRUE@	mv -f $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='$<' object='$@' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(COMPILE) -c $<

.c.obj:
@am__fastdepCC_TRUE@	$(COMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
@am__fastdepCC_TRUE@	mv -f $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='$<' object='$@' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(COMPILE) -c `$(CYGPATH_W) '$<'`

.c.lo:
@am__fastdepCC_TRUE@	$(LTCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
@am__fastdepCC_TRUE@	mv -f $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Plo
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='$<' object='$@' libtool=yes @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(LTCOMPILE) -c -o $@ $<

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	mkid -fID $$unique
tags: TAGS

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	if test -z "$(ETAGS_ARGS)$$tags$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	    $$tags $$unique; \
	fi
ctags: CTAGS
CTAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(CTAGS_ARGS)$$tags$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$tags $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && cd $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) $$here

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -pR $(srcdir)/$$file $(distdir)$$dir || exit 1; \
	    fi; \
	    cp -pR $$d/$$file $(distdir)$$dir || exit 1; \
	  else \
	    test -f $(distdir)/$$file \
	    || cp -p $$d/$$file $(distdir)/$$file \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-am
all-am: Makefile $(PROGRAMS)
installdirs:
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:
	-test -z "$(MOSTLYCLEANFILES)" || rm -f $(MOSTLYCLEANFILES)

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-generic clean-libtool clean-noinstPROGRAMS \
	mostlyclean-am

distclean: distclean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

info: info-am

info-am:

install-data-am:

install-dvi: install-dvi-am

install-exec-am:

install-html: install-html-am

install-info: install-info-am

install-man:

install-pdf: install-pdf-am

install-ps: install-ps-am

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am:

.MAKE: install-am install-strip

.PHONY: CTAGS GTAGS all all-am check check-am clean clean-generic \
	clean-libtool clean-noinstPROGRAMS ctags distclean \
	distclean-compile distclean-generic distclean-libtool \
	distclean-tags distdir dvi dvi-am html html-am info info-am \
	install install-am install-data install-data-am install-dvi \
	install-dvi-am install-exec install-exec-am install-html \
	install-html-am install-info install-info-am install-man \
	install-pdf install-pdf-am install-ps install-ps-am \
	install-strip installcheck installcheck-am installdirs \
	maintainer-clean maintainer-clean-generic mostlyclean \
	mostlyclean-compile mostlyclean-generic mostlyclean-libtool \
	pdf pdf-am ps ps-am tags uninstall uninstall-am

fib-serial$(EXEEXT): $(fib_serial_OBJECTS) $(fib_serial_DEPENDENCIES)
	@rm -f fib-serial
	$(CC) -o $@ $(fib_serial_OBJECTS) $(LIBS)

check:  hello testall fft fib lu matmul cilksort heat test-locks test-errno
	@echo "Runnig Cilk tests.  This will take a while."
	./hello $(PROGFLAGS)
	./test-void-func $(PROGFLAGS)
	./test-locks $(PROGFLAGS)
	./test-errno $(PROGFLAGS)
	./testall $(PROGFLAGS)
	./fft $(PROGFLAGS) -c
	./fib $(PROGFLAGS) 35
	./lu $(PROGFLAGS) -n 1024
	./matmul $(PROGFLAGS) 1066
	./cilksort $(PROGFLAGS) -n 3000000
	./heat $(PROGFLAGS)
	./strassen $(PROGFLAGS)
	./velin $(PROGFLAGS)

.cilk.o:
	$(CILKCOMPILE) -c -o $@ $<
# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
